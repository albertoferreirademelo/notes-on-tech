---
import { getCollection } from 'astro:content';
import PersonalLayout from '../../layouts/PersonalLayout.astro';

export async function getStaticPaths() {
  const notes = await getCollection('notes');
  return notes.map((note) => ({ params: { slug: note.slug }, props: { note } }));
}

const { note } = Astro.props;
const { data } = note;
const { Content } = await note.render();

const base = import.meta.env.BASE_URL || '/';
const normalizeBase = base === '/' ? '' : base.replace(/\/$/, '');
const withBase = (path: string) => (path.startsWith('/') ? `${normalizeBase}${path}` : path);
const imageUrl = data.image ? withBase(data.image) : null;
const language = (data.lang ?? 'en').toUpperCase();
const formattedDate = data.pubDate.toLocaleDateString('en-GB', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

const otherNotes = (await getCollection('notes'))
  .filter((entry) => entry.slug !== note.slug)
  .sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime())
  .slice(0, 3);
---
<PersonalLayout title={`${data.title} | Alberto Ferreira de Melo`} description={data.description}>
  <article class="note-detail card">
    <header class="note-header">
      <a class="back-link" href={withBase('/notes')}>&larr; Back to notes</a>
      <p class="meta">
        <time dateTime={data.pubDate.toISOString()}>{formattedDate}</time>
        <span class="language">{language}</span>
      </p>
      <h1>{data.title}</h1>
      <p class="description">{data.description}</p>
      {imageUrl && <img src={imageUrl} alt="" loading="lazy" class="note-image" />}
    </header>
    <div class="content">
      <Content />
    </div>
  </article>

  {otherNotes.length > 0 && (
    <section aria-labelledby="more-notes" class="related card">
      <h2 id="more-notes">More to explore</h2>
      <ul>
        {otherNotes.map((entry) => (
          <li>
            <a href={withBase(`/notes/${entry.slug}/`)}>{entry.data.title}</a>
            <span>{entry.data.pubDate.toLocaleDateString('en-GB', { year: 'numeric', month: 'short', day: 'numeric' })}</span>
          </li>
        ))}
      </ul>
    </section>
  )}
</PersonalLayout>

<style>
  .note-detail {
    display: grid;
    gap: 2rem;
  }

  .note-header {
    display: grid;
    gap: 1rem;
  }

  .back-link {
    font-size: 0.85rem;
    color: var(--color-text-muted);
  }

  .meta {
    margin: 0;
    display: flex;
    gap: 0.75rem;
    align-items: center;
    font-size: 0.85rem;
    letter-spacing: 0.08em;
    text-transform: uppercase;
    color: var(--color-text-muted);
  }

  .language {
    background: rgba(76, 183, 181, 0.12);
    color: var(--color-accent);
    padding: 0.15rem 0.75rem;
    border-radius: 999px;
  }

  h1 {
    margin: 0;
    font-family: var(--font-serif);
    font-size: clamp(2rem, 4vw + 1rem, 3rem);
  }

  .description {
    margin: 0;
    color: var(--color-text-muted);
    font-size: 1.05rem;
  }

  .note-image {
    width: 100%;
    max-width: 42rem;
    justify-self: center;
  }

  .content :global(p) {
    margin-bottom: 1.4rem;
    color: var(--color-text-muted);
  }

  .content :global(h2),
  .content :global(h3) {
    font-family: var(--font-serif);
    margin-top: 2.4rem;
    margin-bottom: 1rem;
  }

  .related {
    display: grid;
    gap: 1rem;
  }

  .related h2 {
    margin: 0;
    font-family: var(--font-serif);
    font-size: 1.4rem;
  }

  .related ul {
    list-style: none;
    margin: 0;
    padding: 0;
    display: grid;
    gap: 0.9rem;
  }

  .related li {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
    color: var(--color-text-muted);
    font-size: 0.9rem;
  }

  .related span {
    font-variant-numeric: tabular-nums;
  }

  @media (max-width: 640px) {
    .related li {
      flex-direction: column;
      align-items: flex-start;
    }
  }
</style>
